

#include <stdlib.h>

#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
float v[4][3]={{0,0,1},{0,1,-1},{-1,-1,-1},{1,-1,-1}};

static int width;
static int height;
float theta[3]={0,0,0};
int axis=0;

void divide_triangle(float *a,float *b,float *c)
{
	glBegin(GL_POLYGON);
   	glVertex3fv(a);
	glVertex3fv(b);
	glVertex3fv(c);
	glEnd();
}


void tetrahedron()
	{
		glColor3f(1.0,0.0,0.0);
		divide_triangle(v[0],v[1],v[2]);
		glColor3f(0.0,1.0,0.0);
	        divide_triangle(v[3],v[2],v[1]);
		glColor3f(0.0,0.0,1.0);
        	divide_triangle(v[0],v[3],v[1]);
		glColor3f(1.0,1.0,0.0);
		divide_triangle(v[0],v[2],v[3]);
	}


static void display(void) {
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    glColor3f(1,0,0);

    glViewport(0, 0, width/2, height/2);
    glLoadIdentity();
    gluLookAt(0.0, 0.0, -3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    glRotatef(theta[0],1,0,0);
    glRotatef(theta[1],0,1,0);
    glRotatef(theta[2],0,0,1);
    tetrahedron();

    glViewport(width/2, 0, width/2, height/2);
    glLoadIdentity();
    gluLookAt(0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    glRotatef(theta[0],1,0,0);
    glRotatef(theta[1],0,1,0);
    glRotatef(theta[2],0,0,1);
    tetrahedron();

    glViewport(0, height/2, width/2, height/2);
    glLoadIdentity();
    gluLookAt(0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0);
    glRotatef(theta[0],1,0,0);
    glRotatef(theta[1],0,1,0);
    glRotatef(theta[2],0,0,1);
    tetrahedron();

    glViewport(width/2, height/2, width/2, height/2);
    glLoadIdentity();
    gluLookAt(0.0, -3.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0);
    glRotatef(theta[0],1,0,0);
    glRotatef(theta[1],0,1,0);
    glRotatef(theta[2],0,0,1);
    tetrahedron();


    glFlush();
}
void spin()
{
        theta[axis]+=0.05;
        if(theta[axis]>360)
            theta[axis]=0;
        display();
}
static void reshape(int w, int h) {
    width = w;
    height = h;
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustum(-2.0, 2.0, -2.0, 2.0, 1, 20.0);
    glMatrixMode(GL_MODELVIEW);
}



void mouse(int button,int state,int x,int y)
{
    if(button==GLUT_LEFT_BUTTON && state==GLUT_DOWN)
        axis=0;
    if(button==GLUT_RIGHT_BUTTON && state==GLUT_DOWN)
        axis=1;
    if(button==GLUT_MIDDLE_BUTTON && state==GLUT_DOWN)
        axis=2;

}

void keys(unsigned char key,int x,int y)
{
    if(key=='x')
        glutIdleFunc(spin);
    if(key=='y')
        glutIdleFunc(NULL);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB|GLUT_DEPTH);
    glutInitWindowSize(700, 700);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("ViewPort Gasket");
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keys);
    glEnable(GL_DEPTH_TEST);
    glutMainLoop();
}
